<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta http-equiv="X-UA-Compatible" content="ie=edge">
  <title>Document</title>
</head>
<body>

<?php  

// задание 2.1 пишем Hello World!
echo "<br> --------------HELLo WORLD-------------------------------- <br>";

echo "Hello world! <br>";
echo "Hello world!";



// задание 2.2 комментарии в PHP
echo "<br> ----------------- КОММЕНТАРИИ----------------------------- <br>";

echo "hi"; // это комментарий и он комментирует
echo "hi"; # это тоже комментарий и он тоже комментирует
/*
  многострочный
  комментарий
*/


// задание 2.3 переменные и их типы
echo "<br> ---------------ПЕРЕМЕННЫЕ------------------------------- <br>";

$number = 5; // объявление переменной и присвоение ей значения 5
$float = -3.25; // с плавающей точкой
$bool = true; // true/false
$string = 'some text'; // string var

echo "<br> Переменная number = $number";
echo '<br> Переменная number = $number'; // в одинарные кавычки нельзя нормально "встроить" переменные. будет отображаться "как есть" - имя переменной
echo "<br> float = $float";
echo "<br> bool = $bool"; // 1 - в пхп при приведении к строке логические значения true => 1, false => "".
echo "<br> string = $string";
$number = 12;
echo "<br> Переменная number = $number";
echo "<br>";



// задание 2.4 константы
echo "<br> ------------------КОНСТАНТЫ---------------------------- <br>";

echo "Версия PHP - ".PHP_VERSION; // "готовая" константа - выводит версию PHP
define("SOMECONST", 25); // объявление константы и присвоение ее значений
echo "<br>".SOMECONST; //вывод значения константы.
$isExist = defined("SOMECONST"); // объявляем переменную, которая будет содержать результат проверки существования константы
echo "<br> SOMECONST существует? - $isExist"; // выводим результат "поиска" константы. существует ли она?
$isExist = defined("SOME");
echo "<br> SOME существует? - $isExist";



// задание 2.5 арифметические операции
echo "<br> -------------------АРИФМЕТИКА--------------------------- <br>";

// объявление переменных и присвоение им значений
$x = 2.72; 
$y = 23;
// операция сложения переменных и присвоения ее результата новой объявленной переменной
$summ = $x + $y;

// вывод результатов
echo "<br> сумма $x и $y =  $summ";

$diff = $x - $y;
echo "<br> разность $x и $y =  $diff";

$mult = $x * $y;
echo "<br> произведение $x и $y =  $mult";

$division = $x / $y;
echo "<br> результат деления $x на $y =  $division";

$ost = floor($x) % $y;
echo "<br> остаток от деления $x - с отбрасыванием дробной части на $y =  $ost";

$ost = round($x) % $y;
echo "<br> остаток от деления $x - с округлением на $y =  $ost";



// задание 2.6 операции со строками
echo "<br> ---------------СТРОКИ------------------------------- <br>";

// объявление строковых переменных
$str1 = "String 1";
$str2 = "string 2";
// в том числе содержащих теги
$input = "<input type = \" text \" />";

// вывод результатов
echo "<br>" . $str1 . " " . $str2;
echo  "<br> \" \\ "; // "экранирование" знаком \
echo "<br>" . "<b>" . $str1 ."</b>" . " " . $str2;
echo "<br> $input"; // вывод переменной с инпутом



  // задание 2.7, 2.8  логические операции и оператор эквивалентности
  echo "<br> -----------------ЛОГИЧЕСКИЕ ОПЕРАЦИИ----------------------------- <br>";

//  определяем нужные переменные
  $x = 12;
  $y = 14;
  $z = 4.25;
//  в том числе строковую для проверки === и ==
  $str = '12';

/*
Для выводе результатов сравнений будем использовать конструкцию типа
echo "<br>Проверка $x === $y " . ($bool_1 ? "true" : "false");
где echo - языковая конструкция для вывода сообщения на экран, далее следует поясняющий текст - "<br>Проверка $x === $y ",
а ($bool_1 ? "true" : "false") - конструкция для "корректного" вывода результата сравнения true/false 
(условие) ? (значение1) : (значение2) 
Эта конструкция в зависимости от истинности условия возвращает первое или второе значение. 
Если условие верно, то значение1, если не верно, то значение2. 
Полученное значение конкатенируется с первой частью поясняющего текста и выводится на экран

Можно сказать, что это отсылка на следующую тему про условные операторы
*/


//  выполняем различные сравнения (логческие операции) переменных
// строгое равенство
$bool_1 = $x === $y;
echo "<br>Проверка $x === $y " . ($bool_1 ? "true" : "false");

// строгое неравенство
$bool_1 = $x !== $y;
echo "<br> Проверка $x !== $y " . ($bool_1 ? "true" : "false");

// больше
$bool_1 = $x > $y;
echo "<br> Проверка $x > $y " . ($bool_1 ? "true" : "false");

// меньше или равно
$bool_1 = $x <= $y;
echo "<br> Проверка $x <= $y " . ($bool_1 ? "true" : "false");

// НЕ
$bool_1 = !($x < $y);
echo "<br> Проверка НЕ $x < $y " . ($bool_1 ? "true" : "false");

// строгое равенство с вычитанием
$bool_1 = $x === $y - 2;
echo "<br> Проверка $x === $y - 2 " . ($bool_1 ? "true" : "false");

// строгое сравнение числа и строки (ИСПОЛЬЗОВАНИЕ ОПЕРАТОРА ЭКВИВАЛЕНТНОСТИ)
$bool_1 = $x === $str;
echo "<br> Проверка $x === $str (строка) " . ($bool_1 ? "true" : "false");

// нестрогое равенство (с приведением типов данных) числа и строки
$bool_1 = $x == $str;
echo "<br> Проверка $x == $str (строка) " . ($bool_1 ? "true" : "false");

// конструкция с лог. ИЛИ
$bool_1 = $x < $y || $x === $y;
echo "<br> Проверка $x < $y or $x === $y " . ($bool_1 ? "true" : "false");

$bool_1 = $x > $y || $x === $y;
echo "<br> Проверка $x > $y or $x === $y " . ($bool_1 ? "true" : "false");

// конструкция с лог. И
$bool_1 = $x < $y && $x !== $y;
echo "<br> Проверка $x < $y and $x !== $y " . ($bool_1 ? "true" : "false");

$bool_1 = $x < $y && $x === $y;
echo "<br> Проверка $x > $y and $x === $y " . ($bool_1 ? "true" : "false");

// конструкция с искл. ИЛИ (XOR)
$bool_1 = $x < $y ^ $x !== $y;
echo "<br> Проверка $x < $y xor $x !== $y " . ($bool_1 ? "true" : "false");

$bool_1 = $x < $y ^ $x === $y;
echo "<br> Проверка $x > $y xor $x === $y " . ($bool_1 ? "true" : "false");




// 2.9 условные операторы

echo "<br> -----------------УСЛОВНЫЕ ОПЕРАТОРЫ----------------------------- <br>";

// объявление нужных переменных
$x = 5;
$y = 4;
// вывод их значений
echo "<br> Дано: x = $x, y = $y <br>";

// первый случай. if...else => false
if ($x - $y === 1) {
  echo "<br> $x - $y === 1 - true";
} else {
  echo "<br> $x - $y === 1 - false";
}

// второй случай if..else => true
if ($x - $y !== 1) {
  echo "<br> $x - $y !== 1 - true";
} else {
  echo "<br> $x - $y !== 1 - false";
}

// случай с if..else if... else.
if ($x - $y === 0) {
  echo "<br> $x = $y";
} else if($x - $y > 0) {
  echo "<br> $x > $y";
} else {
  echo "<br> $x < $y";
}


// другой синтаксис

//первый вариант, когда согласно условию возвращает значение (первое или второе)
// и дальше строки складываются 
echo "<br>Результат конкатенации => ".($x < $y ? 'x < y' : 'x > y');

// второй вариант, когда возвращенное значение присваиваиется переменной, а потом выводится
$result_1 = ($x < $y ? 'x < y' : 'x > y');
echo "<br>Результат присваивания 1 => $result_1";

// третий вариант, когда в зависимости от условия выполняется код из первого или второго блока. 
$x < $y ? print("<br>Результат выполнения кода => x < y") : print("<br>Результат выполнения кода => x > y");

// тут интересно было, что вернет функция print(), т.е. какое значение будет в $result_2. Выходит она возвращает true?
$result_2 = ($x > $y ? print("<br>Результат 1") : print("<br>Результат2"));
echo "<br>Результат присваивания 2 => $result_2"; // выводит 1


// еще вариант с синтаксисом "endif".
if ($x - $y === 0) :
  echo '<br>Результат "endif" => true';
else:
  echo '<br>Результат "endif" => false';
endif;


// 2.10 циклы

echo "<br> -----------------ЦИКЛЫ----------------------------- <br>";

// простой цикл for (простое условие без ветвления)
echo "<br> Цикл for От 1 до 10 => ";
for ($i = 0; $i < 10; $i++) {
  echo "$i ";
}
// проверяем переменную $i после цикла. она равна 10. 
echo "<br> after for => $i";


// простой цикл while
echo "<br> Цикл while От 1 до 10 => ";
// обнуляем переменную $i. 
$i = 0;
while($i < 10) {
  echo  "$i ";
  $i++;
}

// простой do while цикл от 1 до 10
echo "<br> Цикл do_while_1 От 1 до 10 => ";
// сбрасываем счетчик
$i = 0;
do {
echo "$i ";
$i++;
} while($i < 10);

// обращаем внимание, что счетчик не сброшен, он равен 10, но 1 итерация
// все равно выполняется т.к. проверка условия в конце, после тела цикла.
echo "<br> Цикл do_while_2 не сброшен счетчик => ";
do {
echo "$i ";
$i++;
} while($i < 10);


// параметры в скобках можно не указывать, но нужно ставить ;. 
// в данном примере параметры указаны в теле цикла или до него. 
echo "<br> Цикл for без параметров в скобках: ";
$i = 0;
for (;;){
  echo "$i ";
  $i++;
  if ($i > 9) {
    break;
  }
}

// цикл for с условиями, использованием break и continue
// выводит четные числа до 50 включительно
echo "<br> Цикл for сложный: ";

for ($i = 0; $i < 100; $i++) {
  if ($i > 50) {
    break;
  }

  if ($i % 2 === 0) {
    echo "$i ";
    continue;
  }
  
  
}







  ?>

</body>
</html>